class <- c('vijay', 'ashley', 'stephen', 'john', 'abanti', 'raj')
class
grades <- c(90, 52, 89, 88, 100, 92)
gpa.sheet <- data.frame(class, grades)
class <- c('vijay', 'ashley', 'stephen', 'john', 'abanti', 'raj')
grades <- c(90, 52, 89, 88, 100, 92)
gpa.sheet <- data.frame(class, grades)
paste("student X's grade was", gpa.sheet[4, 'grades']) #
dim(gpa.sheet)
dim(gpa.sheet) [1]
for(student in gpa.sheet [, 'class']) {
# inside the curly brackets we're gunna put the instructions of what we want R to do
# always use {} for a function like this
print(student)
}
for(car in gpa.sheet [, 'class']) {
# inside the curly brackets we're gunna put the instructions of what we want R to do
# always use {} for a function like this
print(car) # R is cycling through a list and the variable gets updated with each cycle
}
for(student in gpa.sheet [, 'class']) {
# inside the curly brackets we're gunna put the instructions of what we want R to do
# always use {} for a function like this
count <- count + 1 # keeps track of how many times the loop is running, step not always necesssary
tmp <- paste(student, 'had a grade of', gpa.sheet$grades[count])
print(tmp) # R is cycling through a list and the variable gets updated with each cycle
}
count <- 0
for(student in gpa.sheet [, 'class']) {
# inside the curly brackets we're gunna put the instructions of what we want R to do
# always use {} for a function like this
count <- count + 1 # keeps track of how many times the loop is running, step not always necesssary
tmp <- paste(student, 'had a grade of', gpa.sheet$grades[count])
print(tmp) # R is cycling through a list and the variable gets updated with each cycle
}
sort(gpa.sheet$grades, decreasing = T)
count <- 0
while(count < 100) {
count <- count + 1
print(count)
}
count
pi
1 == 1 # this means is 1 is equal to 1, this is a logical comparison
1 == 2
1 == '1'
12 == '12'
A == B
A <- matrix(data = 1:4)
B <- matrix(data = c(1, 2, 3 ,5))
A == B
A <- matrix(data = 1:4)
A
A <- matrix(data = 1:4)
B <- matrix(data = c(1, 2, 3 ,5), nrow = 1)
A == B # this will run a logical comparison for every entry in both matricies
students <- c('Abanti', 'John', 'Bela', 'Beyonce', 'Rihanna')
grades <- c(95, 59, 100, 94, 60)
class <- data.frame(students = students, grades = grades)
class
for (row in 1:dim(class)[1]) {
tmp.row <- class[1, ]
if (tmp.row$grades >= 90) {
print(tmp.row$students)
}
}
for (row in 1:dim(class)[1]) {
tmp.row <- class[row, ]
if (tmp.row$grades >= 90) {
print(tmp.row$students)
}
}
for (row in 1:dim(class)[1]) {
tmp.row <- class[row, ]
if (tmp.row$grades >= 90) {
msg <- paste0(tmp.row$students, ' is a genius.') # merges whatever you want with no spaces in bewteen
print(msg)
} else {
msg = paste0(tmp.row$students, ' is an idiot.')
}
}
for (row in 1:dim(class)[1]) {
tmp.row <- class[row, ]
if (tmp.row$grades >= 90) {
msg <- paste0(tmp.row$students, ' is a genius.') # merges whatever you want with no spaces in bewteen
print(msg)
} else {
msg <- paste0(tmp.row$students, ' is an idiot.')
print(msg)
}
}
for (row in 1:dim(class)[1]) {
tmp.row <- class[row, ]
if (tmp.row$grades >= 90) {
msg <- paste0(tmp.row$students, ' is a genius.') # merges whatever you want with no spaces in bewteen
print(msg)
}
else if (tmp.row$grades >= 60) {
msg <- paste0(tmp.row$students, ' is not that dumb.')
print(msg)
}
else {
msg <- paste0(tmp.row$students, ' is an idiot.')
print(msg)
}
}
for (row in 1:dim(class)[1]) {
tmp.row <- class[row,]
if (tmp.row$grades >= 90 && tmp.row$grades < 100) {
msg <- paste0(tmp.row$students, ' is a genius.') # merges whatever you want with no spaces in bewteen
print(msg)
}
else if (tmp.row$grades >= 60) {
msg <- paste0(tmp.row$students, ' is not that dumb.')
print(msg)
}
else {
msg <- paste0(tmp.row$students, ' is an idiot.')
print(msg)
}
}
for (row in 1:dim(class)[1]) {
tmp.row <- class[row,]
if (tmp.row$grades = 100) {
msg <- paste0(tmp.row$students, ' is a God.')
}
else if (tmp.row$grades >= 90 && tmp.row$grades < 100) {
msg <- paste0(tmp.row$students, ' is a genius.') # merges whatever you want with no spaces in bewteen
print(msg)
}
else if (tmp.row$grades >= 60) {
msg <- paste0(tmp.row$students, ' is not that dumb.')
print(msg)
}
else {
msg <- paste0(tmp.row$students, ' is an idiot.')
print(msg)
}
}
for (row in 1:dim(class)[1]) {
tmp.row <- class[row,]
if (tmp.row$grades == 100) {
msg <- paste0(tmp.row$students, ' is a God.')
}
else if (tmp.row$grades >= 90 && tmp.row$grades < 100) {
msg <- paste0(tmp.row$students, ' is a genius.') # merges whatever you want with no spaces in bewteen
print(msg)
}
else if (tmp.row$grades >= 60) {
msg <- paste0(tmp.row$students, ' is not that dumb.')
print(msg)
}
else {
msg <- paste0(tmp.row$students, ' is an idiot.')
print(msg)
}
}
for (row in 1:dim(class)[1]) {
tmp.row <- class[row,]
if (tmp.row$grades == 100) {
msg <- paste0(tmp.row$students, ' is a God.')
print (msg)
}
else if (tmp.row$grades >= 90 && tmp.row$grades < 100) {
msg <- paste0(tmp.row$students, ' is a genius.') # merges whatever you want with no spaces in bewteen
print(msg)
}
else if (tmp.row$grades >= 60) {
msg <- paste0(tmp.row$students, ' is not that dumb.')
print(msg)
}
else {
msg <- paste0(tmp.row$students, ' is an idiot.')
print(msg)
}
}
student.extreme <- 3
if (student.extreme > 95) {
print('studnet is extreme')
}
student.extreme <- 3
if (student.extreme > 95 | student.extreme < 5) { # | means or
print('student is extreme')
}
x <- 6
y <- 10
z <- 6
x.y <- x == y
x.y
x.z <- x == z
x.z
x.y <- as.numeric(x.y)
x.z <- as.numeric(x.z)
x.y
x.z
x.y <- x == y
x.z <- x == z
x.y <- as.numeric(x.y)
x.z <- as.numeric(x.z)
TRUE + TRUE
T * F
p <- c(1:100)
which(p == 20)
which (p == 20)
p <- c(100:1)
which (p == 20)
which(p > 20)
which(p < 20)
P <- matrix(data = 1:100, nrow = 10)
which(P > 60)
which(P > 60, arr.ind = TRUE)
P.data <- as.data.frame(P)
which(P.data > 60)
which(P.data > 60, arr.ind = TRUE)
P.data <- as.data.frame(P) # turns P into a data frame instead of a matrix
which(P.data > 60)
which(P.data > 60, arr.ind = TRUE)
P.data.ind <- which(P.data > 60 & P.data <= 90, arr.ind = TRUE)
P.data.ind <- P.data.ind [, 'row'] # gunna look for the column named row
P.data[P.data.ind, ] # we want all columns but only these specific rows
P.data.ind
P.data.ind <- which(P.data > 60 & P.data <= 90, arr.ind = TRUE)
P.data.ind <- P.data.ind [, 'col'] # gunna look for the column named column
P.data[, P.data.ind] # we want all columns but only these specific rows
P.data.ind <- which(P.data > 60 & P.data <= 90, arr.ind = TRUE)
P.data.ind <- P.data.ind [, 'col'] # gunna look for the column named column
P.data.ind <- unique(P.data.ind) #removes all the doubles and only counts unqiue values
P.data[, P.data.ind] # we want all columns but only these specific rows
##### Functions #####
# General Form of a Function
# func.name <- function (whatever arguments you want the function to take) {
#  instructions
#  return (result) - option, tells the function what the output should be, otherwise it will be the last thing that was produced in the function
#}
test.func <- function(x, y) {
vector <<- c(x, y) # <<- outputs the variable to the global workspace only if there is a variable of the same name in the global workspace
ans <- mean(vector)
print(paste('The mean is', ans))
return(ans)
}
##### Default Value #####
test.func <- function(x, y = 10) { #assumes default value of y as 10 if not specified
vector <<- c(x, y) # <<- outputs the variable to the global workspace only if there is a variable of the same name in the global workspace
ans <- mean(vector)
print(paste('The mean is', ans))
return(ans)
}
library(readxl)
twan02 <- read_excel("~/Documents/R Lessons/twan02.xls")
View(twan02)
library(readxl)
twan02 <- read_excel("~/Documents/R Lessons/twan02.xls",
sheet = "Sheet1")
View(twan02)
View(twan02)
dataset <- data.frame(twan02[, '50-100', '101-150', '151-200'])
dataset <- data.frame(twan02[, c('50-100', '101-150', '151-200')])
View(dataset)
twan02[, c('50-100', '101-150', '151-200')]
dataset <- data.frame(twan02[, '50-100'])
data.frame(twan02[, '50-100'])
data.frame(twan02[, '101-150'])
data.frame(twan02[, '151-200'])
twan02[, '50-100']
c(twan02[, '50-100'] ,twan02[, '101-150'],twan02[, '151-200'])
c(twan02$`50-100`, twan02$`101-150`,twan02$`151-200`)
density <- c(twan02$`50-100`, twan02$`101-150`,twan02$`151-200`)
dataset <- data.frame(density)
site <- c(twan02$Site, twan02$Site, twan02$Site)
dataset <- data.frame(density, site)
site <- rep(twan02$Site, 3)
site
depth <- rep(colnames(twan02), 7)
dataf
depth
depth <- rep(colnames(twan02) [2:4], 7)
depth
dataset <- data.frame(density, site, depth)
colnames(twan02) [2:4]
depth <- c(rep(colnames(twan02) [2], 7), rep(colnames(twan02) [3], 7), rep(colnames(twan02) [4], 7))
depth
dataset <- data.frame(density, site, depth)
abanti.is.better.than.john <- function(dataset) {
result <- lm(formula = 'density ~ site * depth', data = dataset)
result <- anova(result)
result <- lm(formula = 'density ~ site * depth', data = dataset)
result <- anova(result)
result
abanti.is.better.than.john <- function(dataset, y, x1, x2) {
model <- paste(y, ' ~ ', x1, ' * ', x2)
result <- lm(formula = model, data = dataset)
result <- anova(result)
}
xx <- abanti.is.better.than.john(dataset = dataset, y = 'density', x1 = 'site', x2 = 'depth')
xx
dataset2 <- read.csv('/Users/abantitagore/Documents/R Lessons/prob2.csv')
View(dataset2)
yy <- abanti.is.better.than.john(dataset = dataset2, y = 'X', x1 = 'Method', x2 = 'Time')
yy
source(file = '/Users/abantitagore/Documents/R Lessons/Abanti_Function.R')
